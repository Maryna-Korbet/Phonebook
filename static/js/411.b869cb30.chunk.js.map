{"version":3,"file":"static/js/411.b869cb30.chunk.js","mappings":"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","sources":["webpack://phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","redux/contacts/selectors.js","components/ContactsList/ContactsList.js","webpack://phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://phonebook/./src/components/ContactsForm/ContactsForm.module.css?d5f2","components/ContactsForm/ContactsForm.js","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\",\"info\":\"ContactsList_info__o8XVf\"};","// import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectFilter = state => state.filter;\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\n// export const selectVisibleContacts = createSelector(\n//     [selectContacts, selectFilter],\n//     (contacts, filter) => {\n        \n//     const normalizedFilter = filter.toLowerCase();\n    \n//     return contacts.filter(contact =>\n//         contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n// })","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport css from \"components/ContactsList/ContactsList.module.css\";\n\nimport { selectFilter, selectContacts } from 'redux/contacts/selectors';\n\nexport function ContactsList() {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    const getVisibleContacts = () => {\n        const normalizedFilter = filter.toLowerCase();\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter),\n    );\n    }\n\n    const visibleContacts = getVisibleContacts();\n\n    const onDeleteContact = id => dispatch(deleteContact(id));\n\n    return (\n            <ul className={css.list}  type=\"1\">\n                {visibleContacts.map(({ id, name, number }) => (\n                    <li className={css.info} key={id}>\n                        <p>{name}: {number}</p>\n                        <button\n                            type=\"button\"\n                            onClick={() => onDeleteContact(id)}\n                        >Delete</button>\n                    </li>\n                ))}\n            </ul>\n    );\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Filter_title__pSkfx\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport css from \"components/Filter/Filter.module.css\";\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <div>\n      <p className={css.title}>Find contacts by name</p>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={onChangeFilter}\n        />\n    </div>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__1Y65-\",\"label\":\"ContactsForm_label__Z7jht\",\"title\":\"ContactsForm_title__cd5Wh\",\"button\":\"ContactsForm_button__zuUB3\"};","import { useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addСontact } from \"redux/contacts/operations\";\nimport css from \"components/ContactsForm/ContactsForm.module.css\";\n\nexport function ContactsForm () {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    const handleChange = e => {\n        const { name, value } = e.currentTarget;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        \n        contacts.some(contact => \n            contact.name.toLowerCase() === name.toLowerCase() || contact.number === number)\n            ? alert(`Such a name or number was added to the phone book earlier.`)\n            : dispatch(addСontact({name, number}));\n    \n        onReset();\n    };\n\n    const onReset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form action=\"submit\" onSubmit={handleSubmit} className={css.form}>\n            <label htmlFor=\"name\" className={css.label}>\n                <p className={css.title}>Name</p>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </label>\n            \n            <label htmlFor=\"tel\" className={css.label}>\n                <p className={css.title}>Number</p>\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    onChange={handleChange}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n            </label>\n            \n            <button type=\"submit\" className={css.button}>Add contact</button>\n        </form>\n    );\n}\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading,  selectError } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\n\n\nexport default function Contacts() {\n\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <div>\n            <title>Your contacts</title>\n            <ContactsForm />\n            <Filter />\n            <div>{isLoading && !error && <b>Request in progress...</b>}</div>\n            <ContactsList />\n        </div>\n    );\n}"],"names":["selectFilter","state","filter","selectContacts","contacts","selectIsLoading","isLoading","selectError","error","ContactsList","useSelector","dispatch","useDispatch","visibleContacts","normalizedFilter","toLowerCase","contact","name","includes","getVisibleContacts","className","css","type","map","id","number","onClick","deleteContact","onDeleteContact","Filter","value","pattern","title","required","onChange","e","setFilter","currentTarget","ContactsForm","useState","setName","setNumber","handleChange","onReset","action","onSubmit","preventDefault","some","alert","addСontact","htmlFor","Contacts","useEffect","fetchContacts"],"sourceRoot":""}